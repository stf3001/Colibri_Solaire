from fastapi import APIRouter, HTTPException, Request
from pydantic import BaseModel
from typing import Optional
import asyncpg
from datetime import datetime
import databutton as db
from app.auth import AuthorizedUser
from app.env import Mode, mode
from app.libs.database_pool import get_db_connection
from app.libs.log_sanitizer import sanitize_log, sanitize_db_error, sanitize_auth_log

router = APIRouter()

# Models
class GuideAcceptanceRequest(BaseModel):
    pass  # Pas de param√®tres n√©cessaires, on r√©cup√®re tout du contexte

class GuideAcceptanceResponse(BaseModel):
    id: int
    user_id: str
    accepted_at: datetime
    message: str

class GuideStatusResponse(BaseModel):
    has_accepted: bool
    accepted_at: Optional[datetime] = None

@router.post("/accept-referral-guide")
async def accept_referral_guide(request: GuideAcceptanceRequest, user: AuthorizedUser, http_request: Request):
    """Enregistre l'acceptation du guide de parrainage et envoie un email"""
    try:
        # R√©cup√©rer l'IP et user agent
        client_ip = http_request.client.host
        user_agent = http_request.headers.get("user-agent", "")
        
        async with get_db_connection() as conn:
            # V√©rifier si l'utilisateur a d√©j√† accept√©
            existing = await conn.fetchrow(
                "SELECT * FROM referral_guide_acceptances WHERE user_id = $1",
                user.sub
            )
            
            if existing:
                raise HTTPException(status_code=400, detail="Guide d√©j√† accept√©")
            
            # Enregistrer l'acceptation
            acceptance_id = await conn.fetchval(
                """
                INSERT INTO referral_guide_acceptances (user_id, ip_address, user_agent)
                VALUES ($1, $2, $3)
                RETURNING id
                """,
                user.sub, client_ip, user_agent
            )
            
            # R√©cup√©rer les donn√©es de l'acceptation
            acceptance = await conn.fetchrow(
                "SELECT * FROM referral_guide_acceptances WHERE id = $1",
                acceptance_id
            )
            
            # R√©cup√©rer le nom de l'utilisateur
            user_profile = await conn.fetchrow(
                "SELECT full_name FROM user_profiles WHERE user_id = $1",
                user.sub
            )
            
            user_name = user_profile['full_name'] if user_profile else "Ambassadeur"
            
            # Envoyer l'email de confirmation
            try:
                db.notify.email(
                    to=user.primaryEmail,
                    subject="Guide de parrainage accept√© - Bienvenue dans le programme Voltalia x Leroy Merlin",
                    content_html=f"""
                    <h2>üéÅ Bienvenue dans le programme de parrainage Voltalia x Leroy Merlin !</h2>
                    <p>Bonjour {user_name},</p>
                    <p>F√©licitations ! Vous avez accept√© notre guide de parrainage le {acceptance['accepted_at'].strftime('%d/%m/%Y √† %H:%M:%S')}.</p>
                    
                    <h3>‚òÄÔ∏è R√©capitulatif du programme :</h3>
                    <ul>
                        <li><strong>1 parrainage</strong> ‚Üí 250 ‚Ç¨ en bon d'achat</li>
                        <li><strong>3 parrainages</strong> ‚Üí 900 ‚Ç¨ en bons d'achat</li>
                        <li><strong>5 parrainages</strong> ‚Üí 1 500 ‚Ç¨ en bons d'achat</li>
                    </ul>
                    <p><em>‚ö†Ô∏è Rappel : Les paliers ne sont pas cumulables</em></p>
                    
                    <h3>üöÄ Prochaines √©tapes :</h3>
                    <ul>
                        <li>Connectez-vous √† votre espace personnel</li>
                        <li>Commencez √† saisir vos premiers prospects</li>
                        <li>Suivez l'√©volution de vos parrainages</li>
                        <li>R√©cup√©rez vos r√©compenses</li>
                    </ul>
                    
                    <h3>üìã Comment proc√©der :</h3>
                    <ol>
                        <li>Parlez du solaire autour de vous</li>
                        <li>Obtenez l'accord de vos prospects</li>
                        <li>Saisissez leurs coordonn√©es dans votre espace</li>
                        <li>Nos √©quipes les contactent et les accompagnent</li>
                        <li>Vous recevez vos bons d'achat apr√®s installation</li>
                    </ol>
                    
                    <p>Pour toute question, n'h√©sitez pas √† nous contacter via votre espace personnel.</p>
                    
                    <p>Merci de votre confiance et bon parrainage !</p>
                    
                    <p>Cordialement,<br>
                    L'√©quipe St√©phane Aldrighettoni - MS Voltalia</p>
                    
                    <hr>
                    <p style="font-size: 12px; color: #666;">
                        Vous avez accept√© ce guide le {acceptance['accepted_at'].strftime('%d/%m/%Y √† %H:%M:%S')} depuis l'adresse IP {client_ip}.
                    </p>
                    """,
                    content_text=f"""
                    Bienvenue dans le programme de parrainage Voltalia x Leroy Merlin !
                    
                    Bonjour {user_name},
                    
                    F√©licitations ! Vous avez accept√© notre guide de parrainage le {acceptance['accepted_at'].strftime('%d/%m/%Y √† %H:%M:%S')}.
                    
                    R√©capitulatif du programme :
                    - 1 parrainage ‚Üí 250 ‚Ç¨ en bon d'achat
                    - 3 parrainages ‚Üí 900 ‚Ç¨ en bons d'achat  
                    - 5 parrainages ‚Üí 1 500 ‚Ç¨ en bons d'achat
                    
                    Rappel : Les paliers ne sont pas cumulables
                    
                    Prochaines √©tapes :
                    - Connectez-vous √† votre espace personnel
                    - Commencez √† saisir vos premiers prospects
                    - Suivez l'√©volution de vos parrainages
                    - R√©cup√©rez vos r√©compenses
                    
                    Comment proc√©der :
                    1. Parlez du solaire autour de vous
                    2. Obtenez l'accord de vos prospects
                    3. Saisissez leurs coordonn√©es dans votre espace
                    4. Nos √©quipes les contactent et les accompagnent
                    5. Vous recevez vos bons d'achat apr√®s installation
                    
                    Pour toute question, n'h√©sitez pas √† nous contacter via votre espace personnel.
                    
                    Merci de votre confiance et bon parrainage !
                    
                    Cordialement,
                    L'√©quipe St√©phane Aldrighettoni - MS Voltalia
                    
                    Vous avez accept√© ce guide le {acceptance['accepted_at'].strftime('%d/%m/%Y √† %H:%M:%S')} depuis l'adresse IP {client_ip}.
                    """
                )
                print(sanitize_log(f"Email de confirmation du guide envoy√©"))
                
            except Exception as email_error:
                print(sanitize_log(f"Erreur lors de l'envoi de l'email"))
                # Ne pas faire √©chouer l'acceptation si l'email ne part pas
            
            return GuideAcceptanceResponse(
                id=acceptance['id'],
                user_id=str(acceptance['user_id']),
                accepted_at=acceptance['accepted_at'],
                message="Guide de parrainage accept√© avec succ√®s"
            )
            
    except HTTPException:
        raise
    except asyncpg.PostgresError as e:
        print(sanitize_db_error(f"Database error in accept_referral_guide: {e}"))
        raise HTTPException(status_code=500, detail="Erreur de base de donn√©es")
    except Exception as e:
        print(sanitize_log(f"Unexpected error in accept_referral_guide"))
        raise HTTPException(status_code=500, detail="Erreur lors de l'acceptation du guide")

@router.get("/referral-guide-status")
async def get_referral_guide_status(user: AuthorizedUser):
    """V√©rifie si l'utilisateur a accept√© le guide de parrainage"""
    try:
        async with get_db_connection() as conn:
            acceptance = await conn.fetchrow(
                "SELECT accepted_at FROM referral_guide_acceptances WHERE user_id = $1",
                user.sub
            )
            
            if acceptance:
                return GuideStatusResponse(
                    has_accepted=True,
                    accepted_at=acceptance['accepted_at']
                )
            else:
                return GuideStatusResponse(
                    has_accepted=False
                )
            
    except asyncpg.PostgresError as e:
        print(sanitize_db_error(f"Database error in get_referral_guide_status: {e}"))
        raise HTTPException(status_code=500, detail="Erreur de base de donn√©es")
    except Exception as e:
        print(sanitize_log(f"Unexpected error in get_referral_guide_status"))
        raise HTTPException(status_code=500, detail="Erreur lors de la v√©rification du statut")
